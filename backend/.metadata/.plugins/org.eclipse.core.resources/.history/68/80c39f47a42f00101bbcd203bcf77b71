package com.adopciones.adopcionmascotas.utilidades;

public class JWTUtilidades {
	private static final long EXPIRATION_TIME = 1000 * 60 * 24 * 7; // for 7 days

	private final Key Key;

	public JWTUtils() {
		this.Key = generateSecretKey();
	}
	
	private Key generateSecretKey() {
        // Crear un SecureRandom para generar bytes aleatorios
        SecureRandom secureRandom = new SecureRandom();
        byte[] keyBytes = new byte[256]; 
        secureRandom.nextBytes(keyBytes);

        return Keys.hmacShaKeyFor(keyBytes);
    }
	
	
	public String generateToken(UserDetails userDetails) {
		return Jwts.builder()
				.subject(userDetails.getUsername())
				.issuedAt(new Date())
				.expiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
				.signWith(Key)
				.compact();
	}

	public String extractUserName(String token) {
		return extractClaims(token, Claims::getSubject);
	}
	
	private <T> T extractClaims(String token, Function<Claims, T> claimsTFunction) {
		
		return claimsTFunction.apply(Jwts.parser().verifyWith((SecretKey) Key).build().parseSignedClaims(token).getPayload());
		
	}
	
	public boolean isValidToken(String token, UserDetails userDetails) {
		final String username = extractUserName(token);
		return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
	}
	
	private boolean isTokenExpired(String token) {
		return extractClaims(token, Claims::getExpiration).before(new Date());
	}
}
