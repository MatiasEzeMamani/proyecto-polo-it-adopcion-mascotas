package com.adopciones.adopcionmascotas.controladores;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/usuarios")
public class UsuarioControlador {
	
	@Autowired
	private WorkerService workerService;

	@PostMapping("/register")
	public ResponseEntity<Response> register(@RequestBody Worker workerDTO) {
		Response response = workerService.register(workerDTO); // Asegúrate de pasar el DTO correcto
		return ResponseEntity.status(response.getStatusCode()).body(response);
	}

	// Iniciar sesión (POST)
	@PostMapping("/login")
	public ResponseEntity<Response> login(@RequestBody LoginRequest loginRequest) {
		Response response = workerService.login(loginRequest);
		return ResponseEntity.status(response.getStatusCode()).body(response);
	}

	// Obtener todos los trabajadores (GET)
	@GetMapping("/")
	public ResponseEntity<Response> getAllWorkers() {
		Response response = workerService.getAllUsers();
		return ResponseEntity.status(response.getStatusCode()).body(response);
	}

	// Obtener información de un trabajador por ID (GET)
	@GetMapping("/{workerId}")
	public ResponseEntity<Response> getWorkerById(@PathVariable String workerId) {
		Response response = workerService.getUserById(workerId);
		return ResponseEntity.status(response.getStatusCode()).body(response);
	}

	// Eliminar un trabajador por ID (DELETE)
	
	@DeleteMapping("/{workerId}")
	public ResponseEntity<Response> deleteWorker(@PathVariable String workerId, @AuthenticationPrincipal Worker currentUser) {
		Response response = workerService.deleteUser(workerId, currentUser);
		return ResponseEntity.status(response.getStatusCode()).body(response);
	}

	// Obtener información de un trabajador usando el correo electrónico (GET)
	@GetMapping("/me/{email}")
	public ResponseEntity<Response> getMyInfo(@PathVariable String email) {
		Response response = workerService.getMyInfo(email);
		return ResponseEntity.status(response.getStatusCode()).body(response);
	}

	// Modificar información de un trabajador (PUT)
	@PutMapping("edit/{workerId}")
	public ResponseEntity<Response> updateWorker(@PathVariable String workerId, @Valid @RequestBody WorkerDTO workerDTO) {
		Response response = workerService.updateWorker(workerId, workerDTO); // Asegúrate de implementar este método en
																				// el servicio
		return ResponseEntity.status(response.getStatusCode()).body(response);
	}
}
