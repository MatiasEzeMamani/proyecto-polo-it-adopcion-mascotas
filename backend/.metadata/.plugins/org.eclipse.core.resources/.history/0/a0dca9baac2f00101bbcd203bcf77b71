package com.adopciones.adopcionmascotas.servicios.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.adopciones.adopcionmascotas.dtos.IniciarSesion;
import com.adopciones.adopcionmascotas.dtos.Response;
import com.adopciones.adopcionmascotas.dtos.UsuarioDTO;
import com.adopciones.adopcionmascotas.excepciones.OurException;
import com.adopciones.adopcionmascotas.mappers.UsuarioMapper;
import com.adopciones.adopcionmascotas.modelos.Rol;
import com.adopciones.adopcionmascotas.modelos.Usuario;
import com.adopciones.adopcionmascotas.repositorios.UsuarioRepositorio;
import com.adopciones.adopcionmascotas.servicios.interfaz.IUsuarioServicio;
import com.adopciones.adopcionmascotas.utilidades.JWTUtils;

@Service
public class UsuarioServicio implements IUsuarioServicio {
	@Autowired
	private UsuarioRepositorio usuarioRepositorio;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Autowired
	private JWTUtils jwtUtils;
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	private UsuarioMapper usuarioMapper;

	@Override
	public Response register(Usuario usuario) {
	    Response response = new Response();
	    try {
	    	
	    	if(usuario.getRol() == null ) {
	    		usuario.setRol(Rol.ADOPTANTE);
	    	}
	    	if(usuarioRepositorio.existsByEmail(usuario.getEmail())) {
	    		throw new OurException(usuario.getEmail() + "Ya Existe" );
	    	}
	    	
	    	usuario.setContrasena(passwordEncoder.encode(usuario.getPassword()));
	    	Usuario guardarUsuario = usuarioRepositorio.save(usuario);

	    	UsuarioDTO usuarioDTO = usuarioMapper.usuarioToUsuarioDTO(guardarUsuario);
	    	response.setStatusCode(200);
	    	response.setUsuario(usuarioDTO);
	    	
	    }catch(OurException e){
	    	
	    	response.setStatusCode(400);
	    	response.setMessage(e.getMessage());
	    	
	    }catch(Exception e) {
	    	
	    	response.setStatusCode(500);
	    	response.setMessage("Ocurrio un error al registrarse " + e.getMessage());
	    }
	    
		return response;
	}

	@Override
	public Response login(IniciarSesion iniciarSesion) {

		Response response = new Response();
		
		try {
			
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(iniciarSesion.getEmail(), iniciarSesion.getPassword()));
			
			var usuario = usuarioRepositorio.findByEmail(iniciarSesion.getEmail()).orElseThrow(()-> new OurException("Usuario encontrado"));
			
			var token = jwtUtils.generateToken(usuario);
			
			response.setStatusCode(200);
			response.setToken(token);
			response.setRol(usuario.getRol());
			response.setExpirationTime("7 Dias");
			response.setMessage("exitoso");
			
		} catch (OurException e) {
			
			response.setStatusCode(404);
	    	response.setMessage(e.getMessage());
	    	
		} catch (Exception e) {
			
			response.setStatusCode(500);
	    	response.setMessage("Ocuriio un error en el inicio de sesion " + e.getMessage());
	    	
		}
		
		return response;
	}

	@Override
	public Response getAllUsers() {
		
		Response response = new Response();
		
		try {
			
			List<Usuario> usuarioLista = usuarioRepositorio.findAll();
			List<UsuarioDTO> usuarioDTOLista = usuarioMapper.usuariosToUsuarioDTOs(usuarioLista);
			
			response.setStatusCode(200);
			response.setMessage("exito");
			response.setUsuarios(usuarioDTOLista);
				
		} catch (Exception e) {
			
			response.setStatusCode(500);
	    	response.setMessage("Error al obtener todos los usuarios " + e.getMessage());
	    	
		}
		
		return response;
	}

	@Override
	public Response deleteUser(String usuarioId, @AuthenticationPrincipal Usuario currentUser) {
		
		Response response = new Response();
		
		try {
			
			if (!currentUser.getRol().equals(Rol.ADMIN)) {
		            throw new OurException("No tienes permisos para eliminar usuarios");
		    }
			usuarioRepositorio.findById(Long.valueOf(usuarioId)).orElseThrow(() -> new OurException("Usuario no encontrado")); 
			usuarioRepositorio.deleteById(Long.valueOf(usuarioId));
			
			response.setStatusCode(200);
			response.setMessage("exito");
			
		} catch (OurException e){
			
			response.setStatusCode(404);
			response.setMessage(e.getMessage());
			
		} catch (Exception e){
			
			response.setStatusCode(500);
			response.setMessage("Error al eliminar el usuario" + e.getMessage());
			
		}
		
		return response;
	}

	@Override
	public Response getUserById(String usuarioId) {
		
		Response response = new Response();
		
		try {
			
			Usuario usuario = usuarioRepositorio.findById(Long.valueOf(usuarioId)).orElseThrow(() -> new OurException("Usuario no encontrado"));
			UsuarioDTO usuarioDTO = usuarioMapper.usuarioToUsuarioDTO(usuario);
			
			response.setStatusCode(200);
			response.setMessage("exito");
			response.setUsuario(usuarioDTO);
			
		} catch (OurException e) {
			
			response.setStatusCode(404);
			response.setMessage(e.getMessage());
			
		} catch (Exception e) {
			
			response.setStatusCode(500);
			response.setMessage("Error al buscar el usuario" + e.getMessage());
			
		}
		
		return response;
	}

	@Override
	public Response getMyInfo(String email) {

		Response response = new Response();
		
		try {
			
			Usuario usuario = usuarioRepositorio.findByEmail(email).orElseThrow(() -> new OurException("Usuario no encontrado"));
			UsuarioDTO usuarioDTO = usuarioMapper.usuarioToUsuarioDTO(usuario);
			
			response.setStatusCode(200);
			response.setMessage("exito");
			response.setUsuario(usuarioDTO);
			
		} catch (OurException e) {
			
			response.setStatusCode(404);
			response.setMessage(e.getMessage());
			
		} catch (Exception e) {
			
			response.setStatusCode(500);
			response.setMessage("Error al buscar al usuario" + e.getMessage());
			
		}
		
		return response;
	}
	
	@Override
	public Response updateWorker(String usuarioId, UsuarioDTO usuarioDTO) {
	    Response response = new Response();
	    
	    try {
	    	Usuario usuario = usuarioRepositorio.findById(Long.valueOf(usuarioId))
	                            .orElseThrow(() -> new OurException("Worker not found"));

	        // Aquí deberías actualizar los atributos de worker con los valores del workerDTO
	        
	        if (usuarioDTO.getEmail() != null && !usuarioDTO.getEmail().equals(usuario.getEmail())) {
	            if (usuarioRepositorio.existsByEmail(usuarioDTO.getEmail())) {
	                throw new OurException("El email ya está en uso");
	            }
	            usuario.setEmail(usuarioDTO.getEmail());
	        }

	        if (usuarioDTO.getNombre() != null) usuario.setNombre(usuarioDTO.getNombre());
	        if (usuarioDTO.getApellido() != null) usuario.setApellido(usuarioDTO.getApellido());
	        if (usuarioDTO.getRol() != null) usuario.setRol(usuarioDTO.getRol());
	        
	        if (usuarioDTO.getContrasena() != null && !usuarioDTO.getContrasena().isEmpty()) {
	            // Validar que la contraseña y la confirmación coincidan
	            if (!usuarioDTO.getContrasena().equals(usuarioDTO.getConfirmar())) {
	                throw new OurException("La contraseña y su confirmación no coinciden");
	            }

	            // Encriptar la nueva contraseña
	            String encryptedPassword = passwordEncoder.encode(usuarioDTO.getPassword());
	            usuario.setPassword(encryptedPassword);
	        }
	        
	        Worker updatedWorker = workerRepository.save(worker);

	        response.setStatusCode(200);
	        response.setMessage("Worker updated successfully");
	        response.setWorker(workerMapper.workerToWorkerDTO(updatedWorker));
	        
	    } catch (OurException e) {
	        response.setStatusCode(404);
	        response.setMessage(e.getMessage());
	    } catch (Exception e) {
	    	
	    	e.printStackTrace();
	        response.setStatusCode(500);
	        response.setMessage("Error updating worker: " + e.getMessage());
	    }
	    
	    return response;
	}
}